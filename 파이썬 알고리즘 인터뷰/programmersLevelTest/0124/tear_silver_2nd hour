import copy


def solution(n):
    visited = []
    before = [0,0]
    answer = []
    tops = [[k for k in reversed(range(n))], [], []]
    # 계속해서 재귀에서 반복이 일어나고 있으니,
    before = [n,n]
    def move(top) :
        possible_moves = []
        for start in range(3) :
            for end in range(3) :
                if start==end : continue
                if tops[start] :
                    if not tops[end] or tops[end][-1] > tops[start][-1] :
                        possible_moves.append([start,end])
        return possible_moves
    
    def dynamic() :
        print("1. dynamic tops 현 상황", tops)
        if len(tops[2]) == n:
            # all_of_the_answers.append(answer)
            # Return True? 
            return True
            
        possible_moves = move(tops)
        print("2. possible moves", possible_moves)
        #moves => [[0,1], [0,2]]
        #배열에서 순환하는 건 이렇게 간단하게 하기기
        for start, end in possible_moves :
            if start == before[1] and end == before[0] :
                continue
            print(f'3. tops : {tops} start : {start}, end : {end}')
            tops[end].append(tops[start].pop())
            answer.append([start + 1, end + 1])
            
            #재할당이 안된다. 
            before[0], before[1] = start, end
            ######################################## 이거 한줄로 모든게 다
            if dynamic() :
                return True
            tops[start].append(tops[end].pop())
            answer.pop()
        return False    #모든 이동 경로 탐색 후 종료 조건 미달
            
            
    dynamic()
    
    
    
    return answer

print(solution(2))
