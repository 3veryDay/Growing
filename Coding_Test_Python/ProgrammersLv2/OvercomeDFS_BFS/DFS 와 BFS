### DFS 특징, 사용하는 경우
  **경로의 특징을 저장해야 할 때 사용한다**
  - 탐색 속도 자체가 느리다
  - 모든 경로 방문
  - **경로에 조건이 있을 때** 사용한다.
  - 최단 거리에 적합하지 않다.(최단 거리는 BFS)

stack을 이용하거나 재귀를 통해서 구현한다.
'''py
  #리스트로 DFS 구현
  def dfs(graph, start_node) :
    q = []
    visited = []

    while q :
      node = q.pop()
      if node not in visited :
        visited.append(node)
        for neighbor in graph[node] :  #node와 인접한 노드들
           q.append(neighbor)

    return visited 
  '''
리스트로 DFS를 구현하는 경우에는 첫 노드 q로 시작, while q, q pop, visited에 없으면 추가하고 인접 노드 q에 추가하기


'''py
#재귀로 구현
def dfs(graph, start, visited) :
  visited.append(start)
  for node in graph[start] : #start에 인접한 애들 = node
    if node not in visited :
      dfs(graph, node, visited)
'''


def bfs(graph, start) :
    q, visited = [], []
    q.append(start)

    while q :
      node = q.popleft()
      if node not in visited :
        visited.append(node)
        #q.append(node와 인접한 애들)
        for neighbor in graph[node] :
        #or q.extend(graph[node])
    return vistited
      
