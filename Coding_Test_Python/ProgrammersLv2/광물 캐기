# from collections import deque
# #bfs 를 이용해서 풀었는데, 이건 제일 빠른 방법이지, 피로도가 적은 방법이 아니다.

# def solution(picks, minerals):
#     tired = 0
#     total = sum(picks)
#     q = deque()
#     a,b,c = picks
#     q.append([a, b, c, tired,0, 0])
#     idx = -1
#     answer = []
#     while q :
#         dia, iron, stone, tired ,using, count = q.popleft()
#         idx += 1
#         if dia==0 and iron ==0 and stone == 0 and count == 5 :
#             answer.append(tired)
#             continue
#         if idx >= len(minerals) :
#             answer.append(tired)
#             continue
#         mineral = minerals[idx]
#         if mineral == "diamond" :
#             if using == 0 or count == 5 :
#                 if dia > 0 :
#                     q.append([dia-1, iron, stone, tired + 1, 1, 1]) # dia 사용시 1
#                 if iron > 0 :
#                     q.append([dia, iron-1, stone, tired + 5, 2, 1]) #iron 사용시 2
#                 if stone > 0 :
#                     q.append([dia, iron, stone-1, tired + 25, 3, 1]) #stone 사용시 3
#             if using == 1 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ])
#             if using == 2 :
#                 q.append([dia, iron, stone, tired + 5, using, count + 1 ]) 
#             if using == 3 :
#                 q.append([dia, iron, stone, tired + 25, using, count + 1 ]) 
#         elif mineral == "iron" :
#             if using == 0 or count == 5 :
#                 if dia > 0 :
#                     q.append([dia-1, iron, stone, tired + 1, 1, 1]) # dia 사용시 1
#                 if iron > 0 :
#                     q.append([dia, iron-1, stone, tired + 1, 2, 1]) #iron 사용시 2
#                 if stone > 0 :
#                     q.append([dia, iron, stone-1, tired + 5, 3, 1]) #stone 사용시 3
#             if using == 1 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ])
#             if using == 2 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ]) 
#             if using == 3 :
#                 q.append([dia, iron, stone, tired + 5, using, count + 1 ]) 
        
#         elif mineral == "stone" :
#             if using == 0 or count == 5 :
#                 if dia > 0 :
#                     q.append([dia-1, iron, stone, tired + 1, 1, 1]) # dia 사용시 1
#                 if iron > 0 :
#                     q.append([dia, iron-1, stone, tired + 1, 2, 1]) #iron 사용시 2
#                 if stone > 0 :
#                     q.append([dia, iron, stone-1, tired + 1, 3, 1]) #stone 사용시 3
#             if using == 1 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ])
#             if using == 2 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ]) 
#             if using == 3 :
#                 q.append([dia, iron, stone, tired + 1, using, count + 1 ]) 
  

#     return answer
def solution(picks, minerals) :
    dia, iron, stone = picks
    using, count, tired , idx= 0, 0, 0,0
    q = []
    q.append([dia, iron, stone,tired,  using, count, idx])
    answer = float('inf')
    while q :
        
        dia, iron, stone, tired, using, count, idx = q.pop()
        if dia==0 and iron==0 and stone==0 and count == 5 :
            if answer > tired :
                answer = tired
            continue
        if idx>= len(minerals) :
            if answer > tired :
                answer = tired
            continue
        mineral = minerals[idx]
        if mineral == "diamond" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 5, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 25, 3, 1, idx + 1]) #stone 사용시 3
            elif using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1, idx + 1 ])
            elif using == 2 :
                q.append([dia, iron, stone, tired + 5, using, count + 1 , idx + 1]) 
            elif using == 3 :
                q.append([dia, iron, stone, tired + 25, using, count + 1 , idx + 1]) 
        elif mineral == "iron" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 1, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 5, 3, 1, idx + 1]) #stone 사용시 3
            elif using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1, idx + 1 ])
            elif using == 2 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1]) 
            elif using == 3 :
                q.append([dia, iron, stone, tired + 5, using, count + 1, idx + 1 ]) 
        
        elif mineral == "stone" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 1, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 1, 3, 1, idx + 1]) #stone 사용시 3
            elif using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1])
            elif using == 2 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1]) 
            elif using == 3 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1]) 
    return answer

'''
bfs로도 다시 풀어봄
'''
from collections import deque
#bfs 를 이용해서 풀었는데, 이건 제일 빠른 방법이지, 피로도가 적은 방법이 아니다.

def solution(picks, minerals):
    tired = 0
    total = sum(picks)
    q = deque()
    a,b,c = picks
    q.append([a, b, c, tired,0, 0,0])
    idx = -1
    answer = float('inf')
    while q :
        dia, iron, stone, tired ,using, count, idx = q.popleft()
        if dia==0 and iron ==0 and stone == 0 and count == 5 :
            if answer > tired : 
                answer = tired
            continue
        if idx >= len(minerals) :
            if answer > tired : 
                answer = tired
            continue
        mineral = minerals[idx]
        if mineral == "diamond" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 5, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 25, 3, 1, idx + 1]) #stone 사용시 3
                continue
            if using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1])
            if using == 2 :
                q.append([dia, iron, stone, tired + 5, using, count + 1 , idx + 1]) 
            if using == 3 :
                q.append([dia, iron, stone, tired + 25, using, count + 1 , idx + 1]) 
        elif mineral == "iron" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 1, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 5, 3, 1, idx + 1]) #stone 사용시 3
                continue
            if using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1])
            if using == 2 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1]) 
            if using == 3 :
                q.append([dia, iron, stone, tired + 5, using, count + 1 , idx + 1]) 
        
        elif mineral == "stone" :
            if using == 0 or count == 5 :
                if dia > 0 :
                    q.append([dia-1, iron, stone, tired + 1, 1, 1, idx + 1]) # dia 사용시 1
                if iron > 0 :
                    q.append([dia, iron-1, stone, tired + 1, 2, 1, idx + 1]) #iron 사용시 2
                if stone > 0 :
                    q.append([dia, iron, stone-1, tired + 1, 3, 1, idx + 1]) #stone 사용시 3
                continue
            if using == 1 :
                q.append([dia, iron, stone, tired + 1, using, count + 1 , idx + 1])
            if using == 2 :
                q.append([dia, iron, stone, tired + 1, using, count + 1, idx + 1 ]) 
            if using == 3 :
                q.append([dia, iron, stone, tired + 1, using, count + 1, idx + 1 ]) 
    return answer

