from collections import deque
def solution(map):
    # X는 바다, 숫자는 무인도(식량, 모두 합한 값은 최대 묵을 수 있는 날짜)
    '''
    [+1, 0] [-1, 0] [0, +1] [0, -1] 연결-> 같은 무인도
    
    return 각 섬에서 최대 며칠씩 머무를 수 있는지 오름차순!으로 (없으면 -1)
    
    '''
    visited= [[0]*len(map[0]) for _ in range(len(map))]
    answer = []
    def find(y,x, val,q) :
        if visited[y][x] == 1 :
            return 0
        if map[y][x] == 'X' :
            visited[y][x] = 1
            return 0
        
        visited[y][x] = 1
        if y > 0 :
            q.append([y-1,x])
        if y +1 < len(map) :
            q.append([y+1, x ])
        if x > 0 :
            q.append([y, x-1])
        if x +1 < len(map[0]) :
            q.append([y, x+1])
        
        return int(map[y][x])
    
    for i in range(len(map)) :
        for j in range(len(map[0])) :
            if visited[i][j] == 1 :
                continue
            val = 0
            q = deque()
            q.append([i,j])
            while q :
                y,x = q.popleft()
                val += find(y,x, val,q)
            if val != 0 :
                answer.append(val)
            
    if answer :
        return sorted(answer)
    else :
        return [-1]
        
        
    return answer
